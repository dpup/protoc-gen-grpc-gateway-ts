{{if not .EnableStylingCheck -}}
/* eslint-disable */
// @ts-nocheck
{{- else -}}
/* eslint-disable @typescript-eslint/consistent-type-definitions */
{{- end}}

/**
 * This file is a generated Typescript file for GRPC Gateway, DO NOT MODIFY
 */

{{if .HasDependencies -}}
{{- range .Dependencies -}}
  import * as {{.ModuleIdentifier}} from "{{.SourceFile}}";
{{end}}
{{end -}}

{{- if .NeedsOneOfSupport -}}
type Absent<T, K extends keyof T> = { [k in Exclude<keyof T, K>]?: undefined };

type OneOf<T> =
  | { [k in keyof T]?: undefined }
  | (keyof T extends infer K
      ? K extends string & keyof T
        ? { [k in K]: T[K] } & Absent<T, K>
        : never
      : never);
{{end -}}

{{- if .NeedsStructPBSupport}}
type StructPBValue =
  | null
  | boolean
  | string
  | number
  | { [key: string]: StructPBValue }
  | StructPBValue[];
{{end -}}

{{- range .Enums -}}
  {{- include "enum" . -}}
{{- end -}}

{{- range .Messages}}
  {{- include "message" . -}}
{{- end}}

{{- if .UseStaticClasses -}}
  {{- range .Services }}
    {{- include "static_service" . -}}
  {{- end}}
{{- else -}}
  {{- range .Services }}
    {{- include "service_client" . -}}
  {{- end}}
{{- end }}


{{define "enum"}}
export enum {{.Name}} {
  {{- range .Values}}
  {{.}} = "{{.}}",
  {{- end}}
}
{{end}}


{{define "message"}}
{{if .IsDeprecated -}}
/**
 * @deprecated This message has been deprecated.
 */
{{end -}}
{{- if .HasOneOfFields -}}
type Base{{.Name}} = {
{{- range .NonOneOfFields}}
  {{if .IsDeprecated -}}
  /** @deprecated This field has been deprecated. */
  {{end -}}
  {{tsTypeKey .}}: {{tsTypeDef .}};
{{- end}}
{{- range .OptionalFields -}}
  {{if .IsDeprecated -}}
  /** @deprecated This field has been deprecated. */
  {{end -}}
  {{tsTypeKey .}}: {{tsTypeDef .}};
{{- end}}
};

export type {{.Name}} = Base{{.Name}}
{{- range $groupId, $fields := .OneOfFieldsGroups}} &
  OneOf<{
{{- range $index, $field := $fields}}
    {{if $field.IsDeprecated -}}
    /** @deprecated This field has been deprecated. */
    {{end -}}
    {{fieldName $field.Name}}: {{tsType $field}};
{{- end}}
  }>
{{- end -}};

{{/* Standard, non oneof messages */}}

{{- else -}}
{{- if eq (len .Fields) 0 -}}
  export type {{.Name}} = Record<string, never>;
{{- else -}}
  export type {{.Name}} = {
{{- range .Fields}}
  {{if .IsDeprecated -}}
  /** @deprecated This field has been deprecated. */
  {{end -}}
  {{tsTypeKey .}}: {{tsTypeDef .}};
{{- end}}
};
    {{- end -}}
  {{- end}}
{{end}}


{{define "static_service"}}
export class {{.Name}} {
{{- range .Methods}}
{{- if .ServerStreaming }}
  static {{.Name}}(this:void, req: {{tsType .Input}}, entityNotifier?: fm.NotifyStreamEntityArrival<{{tsType .Output}}>, initReq?: fm.InitReq): Promise<void> {
    return fm.fetchStreamingRequest<{{tsType .Output}}>(`{{renderURL .}}`, entityNotifier, {...initReq, {{buildInitReq .}}});
  }
{{- else }}
  static {{.Name}}(this:void, req: {{tsType .Input}}, initReq?: fm.InitReq): Promise<{{tsType .Output}}> {
    return fm.fetchRequest<{{tsType .Output}}>(`{{renderURL .}}`, {...initReq, {{buildInitReq .}}});
  }
{{- end}}
{{- end}}
}

{{end}}

{{define "service_client"}}
{{- range .Methods}}
{{- if .ServerStreaming }}
export function {{functionCase .Name}}(req: {{tsType .Input}}, entityNotifier?: fm.NotifyStreamEntityArrival<{{tsType .Output}}>, initReq?: fm.InitReq): Promise<void> {
  return fm.fetchStreamingRequest<{{tsType .Output}}>(`{{renderURL .}}`, entityNotifier, {...initReq, {{buildInitReq .}}});
}
{{- else }}
export function {{functionCase .Name}}(req: {{tsType .Input}}, initReq?: fm.InitReq): Promise<{{tsType .Output}}> {
  return fm.fetchRequest<{{tsType .Output}}>(`{{renderURL .}}`, {...initReq, {{buildInitReq .}}});
}
{{- end}}
{{end}}
export class {{.Name}}Client {
  private initReq?: fm.InitReq;
  constructor(initReq?: fm.InitReq) {
    this.initReq = initReq;
  }
  {{- range .Methods}}
  {{- if .ServerStreaming }}
  {{functionCase .Name}}(req: {{tsType .Input}}, entityNotifier?: fm.NotifyStreamEntityArrival<{{tsType .Output}}>, initReq?: fm.InitReq): Promise<void> {
    return {{functionCase .Name}}(req, entityNotifier, {...this.initReq, ...initReq});
  }
  {{- else }}
  {{functionCase .Name}}(req: {{tsType .Input}}, initReq?: fm.InitReq): Promise<{{tsType .Output}}> {
    return {{functionCase .Name}}(req, {...this.initReq, ...initReq});
  }
  {{- end }}
  {{- end}}
}

{{end}}